# This script decrypts all strings from infected nginx sample (MD5: e3abf42c0a14cca173070d4da051f473)
# Authors:
# Andrey Rassokhin ( gizmo@yandex-team.ru )
# Evgeniy Sidorov ( e-sidorov@yandex-team.ru )

key = [0x15, 0xE7, 0x40, 0x82, 0x97, 0xFD, 0xA6, 0xF3, 0xFB, 0x05, 0x53, 0xAD, 0xD3, 0x99, 0xF1, 0x59, 0x18,
         0x5C, 0x34, 0xE4, 0xF9, 0x56, 0xCC, 0xE1]

lengths = [0x0C, 0x12, 0x13, 0x0C, 0x06, 0x07, 0x04, 0x03, 0x03, 0x04, 0x04, 0x03, 0x03, 0x03, 0x05, 0x04,
           0x05, 0x0B, 0x08, 0x06, 0x06, 0x08, 0x08, 0x06, 0x07, 0x06, 0x06, 0x07, 0x09, 0x07, 0x05, 0x06,
           0x05, 0x0A, 0x20, 0x05, 0x46, 0x15, 0x10, 0x10, 0x08, 0x08, 0x09, 0x14, 0x07, 0x08, 0x02, 0x02,
           0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
           0x02, 0x06, 0x02, 0x02, 0x02, 0x02]

ciphertext = [[0x3a, 0x81, 0x21, 0xf4, 0xfe, 0x9e, 0xc9, 0x9d, 0xd5, 0x6c, 0x38, 0xc2],
              [0x7d, 0x93, 0x34, 0xf2, 0xad, 0xd2, 0x89, 0x94, 0x94, 0x6a, 0x34, 0xc1, 0xb6, 0xb7, 0x92, 0x36, 0x75, 0x73],
              [0x23, 0x82, 0x78, 0xe1, 0xf6, 0xd0, 0x93, 0x95, 0x9a, 0x28, 0x60, 0xcf, 0xe7, 0xfd, 0xc3, 0x38, 0x7c, 0x65, 0xf],
              [0x3a, 0x81, 0x21, 0xf4, 0xfe, 0x9e, 0xc9, 0x9d, 0xd5, 0x6c, 0x20, 0xc2],
              [0x33, 0x94, 0x35, 0xf0, 0xfb, 0xc0],
              [0x33, 0x94, 0x30, 0xed, 0xe5, 0x89, 0x9b],
              [0x7d, 0x93, 0x2d, 0xee],
              [0x7d, 0x93, 0x2d],
              [0x65, 0x8f, 0x30],
              [0x65, 0x8f, 0x30, 0xb6],
              [0x65, 0x8f, 0x30, 0xb1],
              [0x61, 0x9f, 0x34],
              [0x74, 0x94, 0x23],
              [0x62, 0x8a, 0x2c],
              [0x66, 0x8f, 0x34, 0xef, 0xfb],
              [0x66, 0x8f, 0x34, 0xef],
              [0x3f, 0x86, 0x24, 0xef, 0xbd],
              [0x3f, 0x90, 0x25, 0xe0, 0xfa, 0x9c, 0xd5, 0x87, 0x9e, 0x77, 0x79],
              [0x3f, 0x94, 0x35, 0xe0, 0xfa, 0x94, 0xd2, 0xd9],
              [0x3f, 0x94, 0x34, 0xe3, 0xe3, 0xd7],
              [0x3f, 0x8a, 0x32, 0xf6, 0xf0, 0xd7],
              [0x3f, 0x90, 0x25, 0xe0, 0xfa, 0x94, 0xc8, 0xd9],
              [0x3f, 0x84, 0x30, 0xe3, 0xf9, 0x98, 0xca, 0xd9],
              [0x3f, 0x8a, 0x25, 0xef, 0xf5, 0xd7],
              [0x3f, 0x85, 0x35, 0xe1, 0xfc, 0x8e, 0x8c],
              [0x3f, 0x85, 0x29, 0xee, 0xfb, 0xd7],
              [0x3f, 0x8f, 0x2f, 0xf1, 0xe3, 0xd7],
              [0x3f, 0x94, 0x25, 0xe1, 0xe2, 0x8f, 0x8c],
              [0x3f, 0x94, 0x35, 0xf2, 0xe7, 0x92, 0xd4, 0x87, 0xd1],
              [0x3f, 0x8b, 0x2f, 0xe5, 0xfe, 0x93, 0x8c],
              [0x3f, 0x8b, 0x27, 0xec, 0xbd],
              [0x3f, 0x97, 0x21, 0xf1, 0xe4, 0xd7],
              [0x3f, 0x97, 0x37, 0xe6, 0xbd],
              [0x3f, 0x92, 0x33, 0xe7, 0xe5, 0x93, 0xc7, 0x9e, 0x9e, 0x2f],
              [0x24, 0xa5, 0x6c, 0xea, 0xe2, 0x87, 0xf5, 0xbd, 0xd4, 0x6f, 0x78, 0xce, 0xfb, 0xa5, 0xcb, 0x2a, 0x20,
               0x18, 0x45, 0x8b, 0x88, 0x2d, 0x8f, 0xc4, 0x43, 0xaa, 0x28, 0xf7, 0xd0, 0xb8, 0xfb, 0x88],
              [0x33, 0x8c, 0x25, 0xfb, 0xaa],
              [0x52, 0xae, 0x4, 0xcb, 0xd3, 0xc0, 0x90, 0xc4, 0xcf, 0x30, 0x65, 0x9d, 0xea, 0xa1, 0xc6, 0x6f, 0x2d, 0x6a,
              0x3, 0xc4, 0xc2, 0x76, 0xbc, 0x80, 0x61, 0x8f, 0x7d, 0xad, 0xac, 0xdd, 0xc3, 0x8b, 0x8b, 0x6c, 0x21, 0xc8,
              0xa0, 0xa4, 0xb7, 0x2b, 0x71, 0x38, 0x55, 0x9d, 0xd5, 0x76, 0xff, 0xd0,0x38, 0xa3, 0x25, 0xe1, 0xba, 0xcf,
              0x96, 0xc0, 0xcb, 0x25, 0x61, 0x9e, 0xe9, 0xac, 0xc8, 0x63, 0x2d, 0x65,0x14, 0xa3, 0xb4, 0x2],
              [0x3f, 0xa0, 0x9, 0xc6, 0xde, 0xb9, 0x9b, 0xc5, 0xcc, 0x31, 0x66, 0x9b, 0xe3, 0xa0, 0xc9, 0x6e, 0x2e, 0x69,
               0x2, 0xd3, 0xd3],
              [0x65, 0x96, 0x32, 0xf1, 0xe3, 0x88, 0xd0, 0x84, 0x83, 0x7c, 0x29,0xcc, 0xb1, 0xfa, 0x95, 0x3c],
              [0x25, 0xd6, 0x72, 0xb1, 0xa3, 0xc8, 0x90, 0xc4, 0xc3, 0x3c, 0x32, 0xcf, 0xb0, 0xfd, 0x94, 0x3f],
              [0x3a, 0x83, 0x25, 0xf4, 0xb8, 0x8d, 0xd2, 0x8a],
              [0x3a, 0x83, 0x25, 0xf4, 0xb8, 0x89, 0xd2, 0x8a],
              [0x3a, 0x83, 0x25, 0xf4, 0xb8, 0x8d, 0xd2, 0x9e, 0x83],
              [0x56, 0x86, 0x2e, 0xa5, 0xe3, 0xdd, 0xc0, 0x9c, 0x89, 0x6e, 0x73, 0xdd, 0xa7, 0xe0, 0xdd, 0x79, 0x7a, 0x25, 0x51, 0xc5],
              [0x3a, 0x85, 0x29, 0xec, 0xb8, 0x8e, 0xce],
              [0x52, 0xa2, 0x14, 0xdd, 0xd5, 0xbc, 0xe5, 0xb8],
              [0x51, 0xb2],
              [0x46, 0xb3],
              [0x41, 0xd6],
              [0x59, 0xd6],
              [0x51, 0xd6],
              [0x59, 0xd5],
              [0x51, 0xd5],
              [0x59, 0xd4],
              [0x51, 0xd4],
              [0x59, 0xd3],
              [0x51, 0xd3],
              [0x59, 0xd2],
              [0x51, 0xd2],
              [0x59, 0xd1],
              [0x51, 0xd1],
              [0x59, 0xd0],
              [0x51, 0xd0],
              [0x59, 0xdf],
              [0x51, 0xdf],
              [0x33, 0x94, 0x35, 0xf0, 0xfe, 0xc0],
              [0x59, 0xde],
              [0x51, 0xde],
              [0x59, 0xa6],
              [0x51, 0xa6]]


def get_plain(i):
    return [(key[k % len(key)] ^ ciphertext[i][k]) for k in xrange(lengths[i])]


def main():
    print "This script decrypts and prints all encrypted strings which were found"
    print "in the infected sample of nginx web server (MD5: e3abf42c0a14cca173070d4da051f473)"
    print "Authors:"
    print "\t Andrey Rassokhin ( gizmo@yandex-team.ru )"
    print "\t Evgeniy Sidorov ( e-sidorov@yandex-team.ru )"
    print "*********************************************************************"

    for i in xrange(len(lengths)):
        print "".join(map(chr, get_plain(i)))
    return

if __name__ == "__main__":
    main()